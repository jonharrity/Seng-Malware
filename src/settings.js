
var fs = require('fs');
var saveFileURL = 'scheduledscan.json';
var logsFolder = "./LOGS/";
var logsList = [];

function populate() {

	fs.readdir(logsFolder, (err, files) => {
		logsList = files
		console.log(logsList);

		var select = document.getElementById("logs-list")
		console.log(select)
		for (let i = 0; i <= logsList.length; i++) {
			let option = document.createElement("option")
			option.text = logsList[i]
			select.add(option)
		}
	})
}

function loadScanStatus() {
	var saved = loadScheduleFromFile();
	var label = document.getElementById('status-label');
	if (saved == null)
		label.innerHTML = 'No scan scheduled';
	else
		label.innerHTML = saved.status;

}

function loadScheduleFromFile() {
	fs.readFile(saveFileURL, function (err, data) {
		if (err) {
			document.getElementById('status-label').innerHTML = 'No scan scheduled';
			console.log('error threw: ' + err);
		}
		else {
			var obj = JSON.parse(data.toString('utf-8'));
			document.getElementById('status-label').innerHTML = obj.status;

			var dateFromFile = obj.date
			dateFromFile.setHours += 4;
			scheduleScan(dateFromFile, obj.interval); //load saved scans
			console.log(obj.date + ": this was a saved scheduled scan. Loaded from File");
		}
	});
}

/*
function toggleRecurrent() {
	document.getElementById('single').classList.toggle('hidden');
	document.getElementById('recurrent').classList.toggle('hidden');
}*/

function handleSchedule() {
	//var type = getScheduleType();
	var newStatus;
	//if( type == 'recurrent' )
	//newDate = handleScheduleRecurrent();
	//newStatus = handleScheduleRecurrent();
	//else
	//newDate = handleScheduleSingle();
	newStatus = handleScheduleSingle();

	console.log('setting new status');
	document.getElementById('status-label').innerHTML = newStatus;
}

function isValidDate(dateObj) {
	return !isNaN(dateObj.getDate());
}

function getScheduleType() {
	//if( document.getElementById('recurrent').classList.contains('hidden') )
	return 'single';
	//else
	//return 'recurrent';
}

function formatDate(date) {
	return ("" + date).substring(0, 25);
}

function handleScheduleRecurrent() {
	var dateStart = getDateSingle();
	var interval = getRecurrentDays();

	if (!isValidDate(dateStart))
		console.log("Invalid start date");

	var dateString = formatDate(dateStart);
	if (interval == 1) {
		var mystatus = "Recurrent scan scheduled starting at " + dateString + ' and running every day.';
	}
	else {
		var mystatus = "Recurrent scan scheduled starting at " + dateString + ' and running every ' + interval + ' days.';
	}

	saveSchedule(mystatus, dateStart, interval);
	return mystatus;
}

function handleScheduleSingle() {
	var date = getDateSingle();
	var dateString = formatDate(date);
	if (!isValidDate(date))
		return "Invalid date";
	var mystatus = "Scan scheduled for " + dateString;
	saveSchedule(mystatus, date, -1);
	return mystatus;
}

function saveSchedule(scanStatus, date, interval) {
	scheduleScan(date, interval);			//schedule scan
	console.log(date + "Scheduled Scan Date Test1");
	var dateB = new Date(date.getTime()).toJSON();
	console.log(dateB + "Testing JSON string storing");


	var myobj = {
		"status": scanStatus,
		"date": dateB,
		"interval": interval
	};
	var data_str = JSON.stringify(myobj);
	fs.writeFile(saveFileURL, data_str, function (err) {
		if (err)
			console.log('unable to save date ' + data_str + '; error occurred: ' + err);
		else
			console.log('saved scheduled scan to file successfully');
	});
}

function getRecurrentDays() {
	var interval = document.getElementById('recurrence-interval').value;
	console.log('got interval ' + interval);
	return Number(interval);
}

function getDateSingle() {
	var date = picker.getDate();
	var hour = Number(document.getElementById('single-hour').value);
	if (hour == 12)
		hour -= 12;
	if (document.getElementById('single-hour-type').value == 'pm')
		hour += 12;
	date.setHours(hour);
	return date;
}
